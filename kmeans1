# 📦 Import libraries
!pip install gradio

import gradio as gr
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# 🌦️ Sample weather dataset
data = {
    "Temperature": [30, 25, 28, 22, 35, 20, 18, 32, 27, 26, 15, 10, 8, 40, 38, 12, 22, 29, 31, 16],
    "Humidity": [45, 60, 55, 80, 30, 85, 90, 40, 70, 65, 95, 92, 98, 20, 25, 99, 85, 50, 35, 97],
    "Wind_Speed": [10, 5, 8, 20, 12, 25, 30, 9, 6, 7, 35, 40, 42, 5, 4, 38, 22, 11, 9, 41],
    "Rainfall": [2, 15, 10, 50, 0, 60, 70, 1, 30, 25, 90, 100, 110, 0, 0, 120, 80, 12, 3, 105]
}
df = pd.DataFrame(data)
X = df[["Temperature", "Humidity", "Wind_Speed", "Rainfall"]]

# 📌 Weather label dictionary (fallback to cluster ID if undefined)
weather_types = {
    0: "🌞 Sunny & Dry",
    1: "🌧️ Rainy & Humid",
    2: "💨 Windy & Cool"
}

# 🔍 Predict weather cluster
def predict_weather(temp, humidity, wind_speed, rainfall, n_clusters):
    input_data = np.array([[temp, humidity, wind_speed, rainfall]])
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    kmeans.fit(X)
    cluster = kmeans.predict(input_data)[0]
    label = weather_types.get(cluster, f"Cluster {cluster}")
    return f"🏷️ Assigned Weather Cluster: {label}"

# 📊 Plot clusters
def plot_clusters(n_clusters):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    df["Cluster"] = kmeans.fit_predict(X)

    plt.figure(figsize=(8, 6))
    for cluster in range(n_clusters):
        subset = df[df["Cluster"] == cluster]
        plt.scatter(subset["Temperature"], subset["Humidity"], label=f"Cluster {cluster}")

    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
                s=200, c="red", marker="X", label="Centroids")
    plt.xlabel("Temperature (°C)")
    plt.ylabel("Humidity (%)")
    plt.title(f"Weather Clusters (K = {n_clusters})")
    plt.legend()
    plt.tight_layout()
    plt.savefig("weather_clusters.png")
    plt.close()
    return "weather_clusters.png"

# 🎛️ Gradio UI
with gr.Blocks() as interface:
    gr.Markdown("## 🌦️ K-Means Weather Pattern Classification")
    gr.Markdown("Input weather data to predict its cluster and visualize the weather patterns.")

    with gr.Row():
        temp = gr.Number(label="Temperature (°C)")
        humidity = gr.Number(label="Humidity (%)")

    with gr.Row():
        wind_speed = gr.Number(label="Wind Speed (km/h)")
        rainfall = gr.Number(label="Rainfall (mm)")

    n_clusters = gr.Slider(2, 6, value=3, step=1, label="Number of Clusters (K)")

    with gr.Row():
        predict_btn = gr.Button("🏷️ Predict Cluster")
        plot_btn = gr.Button("📊 Show Cluster Plot")

    result_text = gr.Textbox(label="Weather Cluster Prediction")
    cluster_plot = gr.Image(label="Cluster Visualization")

    predict_btn.click(predict_weather, inputs=[temp, humidity, wind_speed, rainfall, n_clusters], outputs=result_text)
    plot_btn.click(plot_clusters, inputs=n_clusters, outputs=cluster_plot)

# 🚀 Launch interface
interface.launch()
