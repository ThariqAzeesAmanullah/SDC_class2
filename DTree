# 📦 Import libraries
# 📦 Install Gradio
!pip install gradio

# ✅ Now safe to import
import gradio as gr
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler


# 📊 Sample dataset
data = {
    "Years_of_Experience": [1, 3, 5, 10, 7, 12, 8, 15, 2, 6, 9, 11, 4, 14, 13, 3, 7, 8, 12, 5],
    "Performance_Rating": [3, 4, 5, 2, 3, 5, 4, 3, 2, 5, 4, 4, 3, 5, 4, 3, 5, 4, 3, 2],
    "Department": ["HR", "IT", "Sales", "HR", "Finance", "IT", "Sales", "Finance", "HR", "IT",
                   "Sales", "Finance", "HR", "Sales", "IT", "Finance", "Sales", "HR", "IT", "Finance"],
    "Training_Hours": [10, 30, 20, 50, 40, 35, 45, 25, 15, 38, 28, 42, 18, 33, 30, 22, 50, 48, 30, 15],
    "Promoted": [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0]
}

# 🔧 DataFrame
df = pd.DataFrame(data)

# 🎯 Encode categorical data
le = LabelEncoder()
df["Department"] = le.fit_transform(df["Department"])

# 🧠 Feature/label split
X = df.drop("Promoted", axis=1)
y = df["Promoted"]

# 🔀 Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ⚖️ Standardize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 🌳 Model training
model = DecisionTreeClassifier(max_depth=4, random_state=42)
model.fit(X_train, y_train)

# 🔮 Prediction function
def predict_promotion(experience, rating, department, training_hours):
    try:
        dept_encoded = le.transform([department])[0]
        input_data = np.array([[experience, rating, dept_encoded, training_hours]])
        input_scaled = scaler.transform(input_data)
        prediction = model.predict(input_scaled)[0]
        return "✅ Likely to be Promoted" if prediction == 1 else "❌ Unlikely to be Promoted"
    except Exception as e:
        return f"Error: {e}"

# 🖼️ Gradio Interface
gr.Interface(
    fn=predict_promotion,
    inputs=[
        gr.Number(label="🧑‍💼 Years of Experience", value=3),
        gr.Slider(1, 5, step=1, label="📈 Performance Rating"),
        gr.Dropdown(["HR", "IT", "Sales", "Finance"], label="🏢 Department"),
        gr.Number(label="📚 Training Hours", value=20)
    ],
    outputs=gr.Textbox(label="📊 Promotion Prediction"),
    title="Employee Promotion Predictor 🚀",
    description="Fill in the details to predict if an employee is likely to be promoted."
).launch()
